// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(DistribuidoraContext))]
    partial class DistribuidoraContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Domain.Empresa.EmpresaContratante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cnpj")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("RazaoSocial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UltimaAtualizacao")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ValorBaseEntrega")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("EmpresasContratantes");
                });

            modelBuilder.Entity("Core.Domain.Entregas.Documento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EntregadorId")
                        .HasColumnType("int");

                    b.Property<byte[]>("ImagemDocumento")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("UltimaAtualizacao")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EntregadorId");

                    b.ToTable("Documentos");
                });

            modelBuilder.Entity("Core.Domain.Entregas.Endereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CEP")
                        .HasColumnType("int");

                    b.Property<string>("Cidade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complemento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntregadorId")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logradouro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Numero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UltimaAtualizacao")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EntregadorId")
                        .IsUnique();

                    b.ToTable("Enderecos");
                });

            modelBuilder.Entity("Core.Domain.Entregas.Entrega", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataEntrega")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmpresaContratanteId")
                        .HasColumnType("int");

                    b.Property<int?>("EntregadorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UltimaAtualizacao")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ValorEntrega")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorEntregador")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaContratanteId");

                    b.HasIndex("EntregadorId");

                    b.ToTable("Entregas");
                });

            modelBuilder.Entity("Core.Domain.Entregas.Entregador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cnh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cpf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<int>("EnderecoId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sobrenome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UltimaAtualizacao")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Entregadores");
                });

            modelBuilder.Entity("Core.Domain.Entregas.Telefone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DDD")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EntregadorId")
                        .HasColumnType("int");

                    b.Property<string>("NumeroTelefone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UltimaAtualizacao")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EntregadorId");

                    b.ToTable("Telefones");
                });

            modelBuilder.Entity("Core.Domain.Entregas.ValorEntregadorEmpresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmpresaContratanteId")
                        .HasColumnType("int");

                    b.Property<int?>("EntregadorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UltimaAtualizacao")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ValorEntrega")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaContratanteId");

                    b.HasIndex("EntregadorId");

                    b.ToTable("ValoresEntregadorEmpresa");
                });

            modelBuilder.Entity("Core.Domain.Especialidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Especialidades");
                });

            modelBuilder.Entity("Core.Domain.Exemplos.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Documento")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<DateTime?>("UltimaAtualizacao")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Nome", "Documento");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Core.Domain.Exemplos.TelefoneExemplo", b =>
                {
                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("NumeroTelefone")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClienteId", "NumeroTelefone");

                    b.ToTable("TelefonesExemplo");
                });

            modelBuilder.Entity("Core.Domain.Medico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CRM")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Medicos");
                });

            modelBuilder.Entity("Core.Domain.User.Funcao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Funcoes");
                });

            modelBuilder.Entity("Core.Domain.User.Usuario", b =>
                {
                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Senha")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Login");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("EspecialidadeMedico", b =>
                {
                    b.Property<int>("EspecialidadesId")
                        .HasColumnType("int");

                    b.Property<int>("MedicosId")
                        .HasColumnType("int");

                    b.HasKey("EspecialidadesId", "MedicosId");

                    b.HasIndex("MedicosId");

                    b.ToTable("EspecialidadeMedico");
                });

            modelBuilder.Entity("FuncaoUsuario", b =>
                {
                    b.Property<int>("FuncoesId")
                        .HasColumnType("int");

                    b.Property<string>("UsuariosLogin")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FuncoesId", "UsuariosLogin");

                    b.HasIndex("UsuariosLogin");

                    b.ToTable("FuncaoUsuario");
                });

            modelBuilder.Entity("Core.Domain.Entregas.Documento", b =>
                {
                    b.HasOne("Core.Domain.Entregas.Entregador", null)
                        .WithMany("Documentos")
                        .HasForeignKey("EntregadorId");
                });

            modelBuilder.Entity("Core.Domain.Entregas.Endereco", b =>
                {
                    b.HasOne("Core.Domain.Entregas.Entregador", "Entregador")
                        .WithOne("Endereco")
                        .HasForeignKey("Core.Domain.Entregas.Endereco", "EntregadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entregador");
                });

            modelBuilder.Entity("Core.Domain.Entregas.Entrega", b =>
                {
                    b.HasOne("Core.Domain.Empresa.EmpresaContratante", "EmpresaContratante")
                        .WithMany()
                        .HasForeignKey("EmpresaContratanteId");

                    b.HasOne("Core.Domain.Entregas.Entregador", "Entregador")
                        .WithMany()
                        .HasForeignKey("EntregadorId");

                    b.Navigation("EmpresaContratante");

                    b.Navigation("Entregador");
                });

            modelBuilder.Entity("Core.Domain.Entregas.Telefone", b =>
                {
                    b.HasOne("Core.Domain.Entregas.Entregador", null)
                        .WithMany("Telefones")
                        .HasForeignKey("EntregadorId");
                });

            modelBuilder.Entity("Core.Domain.Entregas.ValorEntregadorEmpresa", b =>
                {
                    b.HasOne("Core.Domain.Empresa.EmpresaContratante", "EmpresaContratante")
                        .WithMany()
                        .HasForeignKey("EmpresaContratanteId");

                    b.HasOne("Core.Domain.Entregas.Entregador", "Entregador")
                        .WithMany()
                        .HasForeignKey("EntregadorId");

                    b.Navigation("EmpresaContratante");

                    b.Navigation("Entregador");
                });

            modelBuilder.Entity("Core.Domain.Exemplos.TelefoneExemplo", b =>
                {
                    b.HasOne("Core.Domain.Exemplos.Cliente", "Cliente")
                        .WithMany("Telefones")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("EspecialidadeMedico", b =>
                {
                    b.HasOne("Core.Domain.Especialidade", null)
                        .WithMany()
                        .HasForeignKey("EspecialidadesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Medico", null)
                        .WithMany()
                        .HasForeignKey("MedicosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FuncaoUsuario", b =>
                {
                    b.HasOne("Core.Domain.User.Funcao", null)
                        .WithMany()
                        .HasForeignKey("FuncoesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.User.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UsuariosLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.Entregas.Entregador", b =>
                {
                    b.Navigation("Documentos");

                    b.Navigation("Endereco");

                    b.Navigation("Telefones");
                });

            modelBuilder.Entity("Core.Domain.Exemplos.Cliente", b =>
                {
                    b.Navigation("Telefones");
                });
#pragma warning restore 612, 618
        }
    }
}
